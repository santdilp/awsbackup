AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Backup Demo - Compute Resources (EC2)'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c55b159cbfafe1f0
    us-east-2:
      AMI: ami-0ebc8f6f580a04647
    us-west-1:
      AMI: ami-0b2ca94b5b49e0132
    us-west-2:
      AMI: ami-0a634ae95e11c6f91
    eu-west-1:
      AMI: ami-0bb3fad3c0286ebd5
    eu-west-2:
      AMI: ami-0a669382ea0feb73a
    eu-central-1:
      AMI: ami-0bd39c806c2335b95
    ap-northeast-1:
      AMI: ami-0318ecd6d05daa212
    ap-northeast-2:
      AMI: ami-0e1e385b0a934254a
    ap-southeast-1:
      AMI: ami-0d058fe428540cd89
    ap-southeast-2:
      AMI: ami-0567f647e75c7bc05
    ap-south-1:
      AMI: ami-0470e33cd681b2476
    ca-central-1:
      AMI: ami-0f75c2980c6a5851d
    sa-east-1:
      AMI: ami-03c6239555bb12112

Conditions:
  EnableSSMAccessCondition: !Equals [!Ref EnableSSMAccess, 'true']
  EnableSSHCondition: !Equals [!Ref EnableSSMAccess, 'false']

Parameters:
  EnvironmentName:
    Description: Environment name prefix for resources
    Type: String
    
  EnableSSMAccess:
    Description: Enable SSM Session Manager access to EC2 instances
    Type: String
    Default: true
    AllowedValues: [true, false]
    
  VpcId:
    Description: VPC ID
    Type: String
    
  PublicSubnetId:
    Description: Public Subnet ID
    Type: String
    
  S3BucketName:
    Description: S3 Bucket Name
    Type: String
    
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Type: String
    
  RDSEndpoint:
    Description: RDS Endpoint
    Type: String
    
  DBPassword:
    Description: RDS database password
    Type: String
    NoEcho: true

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress: !If
        - EnableSSHCondition
        - - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        - []
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-SG
        - Key: BackupDemo
          Value: true

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - !If [EnableSSMAccessCondition, arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore, !Ref AWS::NoValue]
      Tags:
        - Key: BackupDemo
          Value: true

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !If [EnableSSHCondition, !Ref AWS::NoValue, !Ref AWS::NoValue]
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          # Create demo directory
          mkdir -p /home/ec2-user/aws-backup-demo
          cd /home/ec2-user/aws-backup-demo
          
          # Download scripts from GitHub
          wget https://github.com/santdilp/awsbackup/archive/refs/heads/main.zip
          unzip main.zip
          mv awsbackup-main/* .
          rm -rf awsbackup-main main.zip
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Run setup scripts
          ./scripts/setup_environment.sh
          ./scripts/install_dependencies.sh
          
          # Set environment variables for scripts
          export S3_BUCKET_NAME="${S3BucketName}"
          export DYNAMODB_TABLE_NAME="${DynamoDBTableName}"
          export RDS_ENDPOINT="${RDSEndpoint}"
          export RDS_PASSWORD="${DBPassword}"
          
          # Run Python scripts
          python3 scripts/setup_database.py
          python3 scripts/generate_documents.py
          
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2
        - Key: BackupDemo
          Value: true

Outputs:
  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub ${EnvironmentName}-EC2InstanceId

  EC2PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-EC2PublicIP